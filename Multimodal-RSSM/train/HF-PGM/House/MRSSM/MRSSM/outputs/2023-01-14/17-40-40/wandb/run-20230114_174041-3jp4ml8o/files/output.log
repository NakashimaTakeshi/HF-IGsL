using cuda:1
Initialize training environment and experience replay memory
load dataset from /root/TurtleBot3/Multimodal-RSSM/train/HF-PGM/House/MRSSM/MRSSM/../../../../../dataset/HF-PGM/MobileRobot_with_Image_Pose/MobileRobotImage_20221127/train
find 10 npy files!
load dataset:  50%|██████████████████▌                  | 5/10 [00:01<00:01,  3.16it/s]
set color augment params

load dataset: 100%|████████████████████████████████████| 10/10 [00:03<00:00,  3.11it/s]
load dataset from /root/TurtleBot3/Multimodal-RSSM/train/HF-PGM/House/MRSSM/MRSSM/../../../../../dataset/HF-PGM/MobileRobot_with_Image_Pose/MobileRobotImage_20221127/validation
find 3 npy files!
set color augment params
calc pca from torch.Size([87, 3, 258, 258]) data
Initialise model parameters randomly
RSSM
load dataset: 100%|██████████████████████████████████████| 3/3 [00:00<00:00,  3.65it/s]






























































































































































































































































train:   9%|███▎                                  | 686/8000 [08:36<1:31:41,  1.33it/s]
Traceback (most recent call last):
  File "main.py", line 48, in <module>
    main()
  File "/usr/local/lib/python3.8/dist-packages/hydra/main.py", line 90, in decorated_main
    _run_hydra(
  File "/usr/local/lib/python3.8/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
  File "/usr/local/lib/python3.8/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
  File "/usr/local/lib/python3.8/dist-packages/hydra/_internal/utils.py", line 219, in run_and_report
    return func()
  File "/usr/local/lib/python3.8/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
  File "/usr/local/lib/python3.8/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
  File "/usr/local/lib/python3.8/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
  File "main.py", line 45, in main
    run(_cfg)
  File "/root/TurtleBot3/Multimodal-RSSM/train/HF-PGM/House/MRSSM/MRSSM/../../../../../algos/MRSSM/MRSSM/train.py", line 76, in run
    train(cfg, cwd, results_dir, device)
  File "/root/TurtleBot3/Multimodal-RSSM/train/HF-PGM/House/MRSSM/MRSSM/../../../../../algos/MRSSM/MRSSM/train.py", line 61, in train
    model.optimize(D)
  File "/root/TurtleBot3/Multimodal-RSSM/train/HF-PGM/House/MRSSM/MRSSM/../../../../../algos/MRSSM/base/base.py", line 443, in optimize
    self.optimize_loss(observations_target, actions, rewards, nonterminals, states, self.itr_optim, observations_contrastive)
  File "/root/TurtleBot3/Multimodal-RSSM/train/HF-PGM/House/MRSSM/MRSSM/../../../../../algos/MRSSM/base/base.py", line 421, in optimize_loss
    self.scaler.scale(model_loss).backward()
  File "/usr/local/lib/python3.8/dist-packages/torch/_tensor.py", line 488, in backward
    torch.autograd.backward(
  File "/usr/local/lib/python3.8/dist-packages/torch/autograd/__init__.py", line 197, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt