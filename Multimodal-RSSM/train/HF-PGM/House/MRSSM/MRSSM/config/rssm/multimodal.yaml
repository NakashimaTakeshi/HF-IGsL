# model:

# -- Architecture --
observation_names_enc: ["image_hsr_256"]
observation_names_rec: ["image_hsr_256"]

condition_names: ["Pose"]
predict_reward: False


multimodal: False
multimodal_params: # if multimodal is True, multimodal_params are used
  fusion_timing: obs_emb   # stochastic_state, obs_emb
  fusion_method: PoE     # NN, PoE, MoPoE, MoPoE_mean, MoPoE_select. MoPoE_mean calculate the expected value as posterior dist.
  num_components: 

#Using HF-PGM model (Proposed model 1)
HF_PGM:
  use: True
  pose_predict: True
  pose_predict_index: 0.05    # default: 1

# contrastive_learning: we can use CL when observation is single-modal or fusion timing is obs_emb
MuMMI:
  use: False
dreaming:
  use: False
  cpc_overshooting_distance: 3
  cpc_contrast: window          # default: window #  window, time, batch
  mycpc_temp_logits: 1          # default: 1

coefficients:
  image_horizon: 1
  sound: 1
  pose_quat_norm: 1

activation_function:
  cnn: relu                     # default: relu
  dense: elu                    # default: elu
  fusion: relu                  # default: relu

embedding_size:
  fusion: 1024                  # default: 1024
  image:  1024                  # default: 1024
  sound:   256                  # default:  256
  other:   128                  # default:  128

hidden_size: 256                # default: 200
belief_size: 64                # default: 200
state_size:  64                # default: 30
normalization: BatchNorm # BatchNorm, InstanceNorm, GroupNorm, None # default: None


# -- observation loss --
worldmodel_LogProbLoss: False   # default: False


# -- KL divergence --
overshooting_distance: 0        # default: 0
overshooting_kl_beta: 0         # default: 0
overshooting_reward_scale: 0    # default: 0
global_kl_beta: 0               # default: 0
free_nats: 3                    # default: 3

kl_beta: 1 # this is the beta param like beta-VAE  default: 1
kl_balancing_alpha: 0.5 # default: 0.5
# kl_loss =    alpha    * compute_kl(stop_grad(approx_posterior), prior)
#         + (1 - alpha) * compute_kl(approx_posterior, stop_grad(prior))

obs_emb_kl_beta: 0              # default: 0 this parameter is used when fusion timing is obs_emb

# -- optimization --
learning_rate_schedule: 0         # default: 0
adam_epsilon: 1e-7                # default: 1e-7
# Note that original has a linear learning rate decay, but it seems unlikely that this makes a significant difference
grad_clip_norm: 100.0             # default: 100.0

model_learning_rate: 1e-3         # default: 1e-3
